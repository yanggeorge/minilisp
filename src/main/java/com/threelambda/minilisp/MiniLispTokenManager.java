/* Generated By:JavaCC: Do not edit this line. MiniLispTokenManager.java */
package com.threelambda.minilisp;

/**
 * Token Manager.
 */
public class MiniLispTokenManager implements MiniLispConstants {

    /**
     * Debug output.
     */
    public java.io.PrintStream debugStream = System.out;

    /**
     * Set debug output.
     */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 39:
                return jjStopAtPos(0, 12);
            case 40:
                return jjStopAtPos(0, 2);
            case 41:
                return jjStopAtPos(0, 3);
            case 43:
                return jjStopAtPos(0, 6);
            case 45:
                return jjStopAtPos(0, 5);
            case 46:
                return jjStopAtPos(0, 4);
            case 60:
                jjmatchedKind = 9;
                return jjMoveStringLiteralDfa1_0(0x400L);
            case 61:
                return jjStopAtPos(0, 7);
            case 62:
                jjmatchedKind = 8;
                return jjMoveStringLiteralDfa1_0(0x800L);
            default:
                return jjMoveNfa_0(1, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
            case 61:
                if ((active0 & 0x400L) != 0L)
                    return jjStopAtPos(1, 10);
                else if ((active0 & 0x800L) != 0L)
                    return jjStopAtPos(1, 11);
                break;
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    static final long[] jjbitVec0 = {
            0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 11;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                            if ((0x3fe000000000000L & l) != 0L) {
                                if (kind > 13)
                                    kind = 13;
                                jjCheckNAdd(2);
                            } else if ((0x100002600L & l) != 0L) {
                                if (kind > 1)
                                    kind = 1;
                                jjCheckNAdd(0);
                            } else if ((0x8000043000000000L & l) != 0L) {
                                if (kind > 14)
                                    kind = 14;
                                jjCheckNAdd(5);
                            } else if (curChar == 59) {
                                if (kind > 15)
                                    kind = 15;
                                jjCheckNAddStates(0, 2);
                            } else if (curChar == 48) {
                                if (kind > 13)
                                    kind = 13;
                            }
                            break;
                        case 0:
                            if ((0x100002600L & l) == 0L)
                                break;
                            if (kind > 1)
                                kind = 1;
                            jjCheckNAdd(0);
                            break;
                        case 2:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 13)
                                kind = 13;
                            jjCheckNAdd(2);
                            break;
                        case 3:
                            if (curChar == 48 && kind > 13)
                                kind = 13;
                            break;
                        case 4:
                            if ((0x8000043000000000L & l) == 0L)
                                break;
                            if (kind > 14)
                                kind = 14;
                            jjCheckNAdd(5);
                            break;
                        case 5:
                            if ((0xf7ffbcf6ffffd9ffL & l) == 0L)
                                break;
                            if (kind > 14)
                                kind = 14;
                            jjCheckNAdd(5);
                            break;
                        case 6:
                            if (curChar != 59)
                                break;
                            if (kind > 15)
                                kind = 15;
                            jjCheckNAddStates(0, 2);
                            break;
                        case 7:
                            if ((0xffffffffffffdbffL & l) == 0L)
                                break;
                            if (kind > 15)
                                kind = 15;
                            jjCheckNAddStates(0, 2);
                            break;
                        case 8:
                            if ((0x2400L & l) != 0L && kind > 15)
                                kind = 15;
                            break;
                        case 9:
                            if (curChar == 10 && kind > 15)
                                kind = 15;
                            break;
                        case 10:
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 9;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                            if ((0x7fffffe87ffffffL & l) == 0L)
                                break;
                            if (kind > 14)
                                kind = 14;
                            jjCheckNAdd(5);
                            break;
                        case 5:
                            if ((0xd7ffffffd7ffffffL & l) == 0L)
                                break;
                            if (kind > 14)
                                kind = 14;
                            jjCheckNAdd(5);
                            break;
                        case 7:
                            if (kind > 15)
                                kind = 15;
                            jjAddStates(0, 2);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 5:
                            if ((jjbitVec0[i2] & l2) == 0L)
                                break;
                            if (kind > 14)
                                kind = 14;
                            jjstateSet[jjnewStateCnt++] = 5;
                            break;
                        case 7:
                            if ((jjbitVec0[i2] & l2) == 0L)
                                break;
                            if (kind > 15)
                                kind = 15;
                            jjAddStates(0, 2);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = {
            7, 8, 10,
    };

    /**
     * Token literal values.
     */
    public static final String[] jjstrLiteralImages = {
            "", null, "\50", "\51", "\56", "\55", "\53", "\75", "\76", "\74", "\74\75",
            "\76\75", "\47", null, null, null,};

    /**
     * Lexer state names.
     */
    public static final String[] lexStateNames = {
            "DEFAULT",
    };
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[11];
    private final int[] jjstateSet = new int[22];
    protected char curChar;

    /**
     * Constructor.
     */
    public MiniLispTokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        input_stream = stream;
    }

    /**
     * Constructor.
     */
    public MiniLispTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 11; i-- > 0; )
            jjrounds[i] = 0x80000000;
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /**
     * Get the next Token.
     */
    public Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (; ; ) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                matchedToken = jjFillToken();
                return matchedToken;
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

}
